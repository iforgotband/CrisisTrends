"use strict";var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; // Word cloud layout by Jason Davies, http://www.jasondavies.com/word-cloud/
// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
(function () {
  function cloud() {
    var size = [256, 256],
    text = cloudText,
    font = cloudFont,
    fontSize = cloudFontSize,
    fontStyle = cloudFontNormal,
    fontWeight = cloudFontNormal,
    rotate = cloudRotate,
    padding = cloudPadding,
    spiral = archimedeanSpiral,
    words = [],
    timeInterval = Infinity,
    event = d3.dispatch("word", "end"),
    timer = null,
    cloud = {};

    cloud.start = function () {
      var board = zeroArray((size[0] >> 5) * size[1]),
      bounds = null,
      n = words.length,
      i = -1,
      tags = [],
      data = words.map(function (d, i) {
        d.text = text.call(this, d, i);
        d.font = font.call(this, d, i);
        d.style = fontStyle.call(this, d, i);
        d.weight = fontWeight.call(this, d, i);
        d.rotate = rotate.call(this, d, i);
        d.size = ~~fontSize.call(this, d, i);
        d.padding = padding.call(this, d, i);
        return d;
      }).sort(function (a, b) {return b.size - a.size;});

      if (timer) clearInterval(timer);
      timer = setInterval(step, 0);
      step();

      return cloud;

      function step() {
        var start = +new Date(),
        d;
        while (+new Date() - start < timeInterval && ++i < n && timer) {
          d = data[i];
          d.x = size[0] * (Math.random() + .5) >> 1;
          d.y = size[1] * (Math.random() + .5) >> 1;
          cloudSprite(d, data, i);
          if (d.hasText && place(board, d, bounds)) {
            tags.push(d);
            event.word(d);
            if (bounds) cloudBounds(bounds, d);else
            bounds = [{ x: d.x + d.x0, y: d.y + d.y0 }, { x: d.x + d.x1, y: d.y + d.y1 }];
            // Temporary hack
            d.x -= size[0] >> 1;
            d.y -= size[1] >> 1;
          }
        }
        if (i >= n) {
          cloud.stop();
          event.end(tags, bounds);
        }
      }
    };

    cloud.stop = function () {
      if (timer) {
        clearInterval(timer);
        timer = null;
      }
      return cloud;
    };

    cloud.timeInterval = function (x) {
      if (!arguments.length) return timeInterval;
      timeInterval = x == null ? Infinity : x;
      return cloud;
    };

    function place(board, tag, bounds) {
      var perimeter = [{ x: 0, y: 0 }, { x: size[0], y: size[1] }],
      startX = tag.x,
      startY = tag.y,
      maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
      s = spiral(size),
      dt = Math.random() < .5 ? 1 : -1,
      t = -dt,
      dxdy,
      dx,
      dy;

      while (dxdy = s(t += dt)) {
        dx = ~~dxdy[0];
        dy = ~~dxdy[1];

        if (Math.min(dx, dy) > maxDelta) break;

        tag.x = startX + dx;
        tag.y = startY + dy;

        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||
        tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
        // TODO only check for collisions within current bounds.
        if (!bounds || !cloudCollide(tag, board, size[0])) {
          if (!bounds || collideRects(tag, bounds)) {
            var sprite = tag.sprite,
            w = tag.width >> 5,
            sw = size[0] >> 5,
            lx = tag.x - (w << 4),
            sx = lx & 0x7f,
            msx = 32 - sx,
            h = tag.y1 - tag.y0,
            x = (tag.y + tag.y0) * sw + (lx >> 5),
            last;
            for (var j = 0; j < h; j++) {
              last = 0;
              for (var i = 0; i <= w; i++) {
                board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
              }
              x += sw;
            }
            delete tag.sprite;
            return true;
          }
        }
      }
      return false;
    }

    cloud.words = function (x) {
      if (!arguments.length) return words;
      words = x;
      return cloud;
    };

    cloud.size = function (x) {
      if (!arguments.length) return size;
      size = [+x[0], +x[1]];
      return cloud;
    };

    cloud.font = function (x) {
      if (!arguments.length) return font;
      font = d3.functor(x);
      return cloud;
    };

    cloud.fontStyle = function (x) {
      if (!arguments.length) return fontStyle;
      fontStyle = d3.functor(x);
      return cloud;
    };

    cloud.fontWeight = function (x) {
      if (!arguments.length) return fontWeight;
      fontWeight = d3.functor(x);
      return cloud;
    };

    cloud.rotate = function (x) {
      if (!arguments.length) return rotate;
      rotate = d3.functor(x);
      return cloud;
    };

    cloud.text = function (x) {
      if (!arguments.length) return text;
      text = d3.functor(x);
      return cloud;
    };

    cloud.spiral = function (x) {
      if (!arguments.length) return spiral;
      spiral = spirals[x + ""] || x;
      return cloud;
    };

    cloud.fontSize = function (x) {
      if (!arguments.length) return fontSize;
      fontSize = d3.functor(x);
      return cloud;
    };

    cloud.padding = function (x) {
      if (!arguments.length) return padding;
      padding = d3.functor(x);
      return cloud;
    };

    return d3.rebind(cloud, event, "on");
  }

  function cloudText(d) {
    return d.text;
  }

  function cloudFont() {
    return "serif";
  }

  function cloudFontNormal() {
    return "normal";
  }

  function cloudFontSize(d) {
    return Math.sqrt(d.value);
  }

  function cloudRotate() {
    return (~~(Math.random() * 6) - 3) * 30;
  }

  function cloudPadding() {
    return 1;
  }

  // Fetches a monochrome sprite bitmap for the specified text.
  // Load in batches for speed.
  function cloudSprite(d, data, di) {
    if (d.sprite) return;
    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
    var x = 0,
    y = 0,
    maxh = 0,
    n = data.length;
    --di;
    while (++di < n) {
      d = data[di];
      c.save();
      c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
      var w = c.measureText(d.text + "m").width * ratio,
      h = d.size << 1;
      if (d.rotate) {
        var sr = Math.sin(d.rotate * cloudRadians),
        cr = Math.cos(d.rotate * cloudRadians),
        wcr = w * cr,
        wsr = w * sr,
        hcr = h * cr,
        hsr = h * sr;
        w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
        h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
      } else {
        w = w + 0x1f >> 5 << 5;
      }
      if (h > maxh) maxh = h;
      if (x + w >= cw << 5) {
        x = 0;
        y += maxh;
        maxh = 0;
      }
      if (y + h >= ch) break;
      c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
      if (d.rotate) c.rotate(d.rotate * cloudRadians);
      c.fillText(d.text, 0, 0);
      if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, 0, 0);
      c.restore();
      d.width = w;
      d.height = h;
      d.xoff = x;
      d.yoff = y;
      d.x1 = w >> 1;
      d.y1 = h >> 1;
      d.x0 = -d.x1;
      d.y0 = -d.y1;
      d.hasText = true;
      x += w;
    }
    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
    sprite = [];
    while (--di >= 0) {
      d = data[di];
      if (!d.hasText) continue;
      var w = d.width,
      w32 = w >> 5,
      h = d.y1 - d.y0;
      // Zero the buffer
      for (var i = 0; i < h * w32; i++) {sprite[i] = 0;}
      x = d.xoff;
      if (x == null) return;
      y = d.yoff;
      var seen = 0,
      seenRow = -1;
      for (var j = 0; j < h; j++) {
        for (var i = 0; i < w; i++) {
          var k = w32 * j + (i >> 5),
          m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;
          sprite[k] |= m;
          seen |= m;
        }
        if (seen) seenRow = j;else
        {
          d.y0++;
          h--;
          j--;
          y++;
        }
      }
      d.y1 = d.y0 + seenRow;
      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
    }
  }

  // Use mask-based collision detection.
  function cloudCollide(tag, board, sw) {
    sw >>= 5;
    var sprite = tag.sprite,
    w = tag.width >> 5,
    lx = tag.x - (w << 4),
    sx = lx & 0x7f,
    msx = 32 - sx,
    h = tag.y1 - tag.y0,
    x = (tag.y + tag.y0) * sw + (lx >> 5),
    last;
    for (var j = 0; j < h; j++) {
      last = 0;
      for (var i = 0; i <= w; i++) {
        if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) &
        board[x + i]) return true;
      }
      x += sw;
    }
    return false;
  }

  function cloudBounds(bounds, d) {
    var b0 = bounds[0],
    b1 = bounds[1];
    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
  }

  function collideRects(a, b) {
    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
  }

  function archimedeanSpiral(size) {
    var e = size[0] / size[1];
    return function (t) {
      return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
    };
  }

  function rectangularSpiral(size) {
    var dy = 4,
    dx = dy * size[0] / size[1],
    x = 0,
    y = 0;
    return function (t) {
      var sign = t < 0 ? -1 : 1;
      // See triangular numbers: T_n = n * (n + 1) / 2.
      switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {
        case 0:x += dx;break;
        case 1:y += dy;break;
        case 2:x -= dx;break;
        default:y -= dy;break;}

      return [x, y];
    };
  }

  // TODO reuse arrays?
  function zeroArray(n) {
    var a = [],
    i = -1;
    while (++i < n) {a[i] = 0;}
    return a;
  }

  var cloudRadians = Math.PI / 180,
  cw = 1 << 11 >> 5,
  ch = 1 << 11,
  canvas,
  ratio = 1;

  if (typeof document !== "undefined") {
    canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = 1;
    ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
    canvas.width = (cw << 5) / ratio;
    canvas.height = ch / ratio;
  } else {
    // Attempt to use node-canvas.
    canvas = new Canvas(cw << 5, ch);
  }

  var c = canvas.getContext("2d"),
  spirals = {
    archimedean: archimedeanSpiral,
    rectangular: rectangularSpiral };

  c.fillStyle = c.strokeStyle = "red";
  c.textAlign = "center";

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) module.exports = cloud;else
  (d3.layout || (d3.layout = {})).cloud = cloud;
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQzLmNsb3VkLmpzIl0sIm5hbWVzIjpbImNsb3VkIiwic2l6ZSIsInRleHQiLCJjbG91ZFRleHQiLCJmb250IiwiY2xvdWRGb250IiwiZm9udFNpemUiLCJjbG91ZEZvbnRTaXplIiwiZm9udFN0eWxlIiwiY2xvdWRGb250Tm9ybWFsIiwiZm9udFdlaWdodCIsInJvdGF0ZSIsImNsb3VkUm90YXRlIiwicGFkZGluZyIsImNsb3VkUGFkZGluZyIsInNwaXJhbCIsImFyY2hpbWVkZWFuU3BpcmFsIiwid29yZHMiLCJ0aW1lSW50ZXJ2YWwiLCJJbmZpbml0eSIsImV2ZW50IiwiZDMiLCJkaXNwYXRjaCIsInRpbWVyIiwic3RhcnQiLCJib2FyZCIsInplcm9BcnJheSIsImJvdW5kcyIsIm4iLCJsZW5ndGgiLCJpIiwidGFncyIsImRhdGEiLCJtYXAiLCJkIiwiY2FsbCIsInN0eWxlIiwid2VpZ2h0Iiwic29ydCIsImEiLCJiIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwic3RlcCIsIkRhdGUiLCJ4IiwiTWF0aCIsInJhbmRvbSIsInkiLCJjbG91ZFNwcml0ZSIsImhhc1RleHQiLCJwbGFjZSIsInB1c2giLCJ3b3JkIiwiY2xvdWRCb3VuZHMiLCJ4MCIsInkwIiwieDEiLCJ5MSIsInN0b3AiLCJlbmQiLCJhcmd1bWVudHMiLCJ0YWciLCJwZXJpbWV0ZXIiLCJzdGFydFgiLCJzdGFydFkiLCJtYXhEZWx0YSIsInNxcnQiLCJzIiwiZHQiLCJ0IiwiZHhkeSIsImR4IiwiZHkiLCJtaW4iLCJjbG91ZENvbGxpZGUiLCJjb2xsaWRlUmVjdHMiLCJzcHJpdGUiLCJ3Iiwid2lkdGgiLCJzdyIsImx4Iiwic3giLCJtc3giLCJoIiwibGFzdCIsImoiLCJmdW5jdG9yIiwic3BpcmFscyIsInJlYmluZCIsInZhbHVlIiwiZGkiLCJjIiwiY2xlYXJSZWN0IiwiY3ciLCJyYXRpbyIsImNoIiwibWF4aCIsInNhdmUiLCJtZWFzdXJlVGV4dCIsInNyIiwic2luIiwiY2xvdWRSYWRpYW5zIiwiY3IiLCJjb3MiLCJ3Y3IiLCJ3c3IiLCJoY3IiLCJoc3IiLCJtYXgiLCJhYnMiLCJ0cmFuc2xhdGUiLCJmaWxsVGV4dCIsImxpbmVXaWR0aCIsInN0cm9rZVRleHQiLCJyZXN0b3JlIiwiaGVpZ2h0IiwieG9mZiIsInlvZmYiLCJwaXhlbHMiLCJnZXRJbWFnZURhdGEiLCJ3MzIiLCJzZWVuIiwic2VlblJvdyIsImsiLCJtIiwic2xpY2UiLCJiMCIsImIxIiwiZSIsInJlY3Rhbmd1bGFyU3BpcmFsIiwic2lnbiIsIlBJIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29udGV4dCIsIkNhbnZhcyIsImFyY2hpbWVkZWFuIiwicmVjdGFuZ3VsYXIiLCJmaWxsU3R5bGUiLCJzdHJva2VTdHlsZSIsInRleHRBbGlnbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJsYXlvdXQiXSwibWFwcGluZ3MiOiJ1UkFBQTtBQUNBO0FBQ0EsQ0FBQyxZQUFXO0FBQ1YsV0FBU0EsS0FBVCxHQUFpQjtBQUNmLFFBQUlDLE9BQU8sQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFYO0FBQ0lDLFdBQU9DLFNBRFg7QUFFSUMsV0FBT0MsU0FGWDtBQUdJQyxlQUFXQyxhQUhmO0FBSUlDLGdCQUFZQyxlQUpoQjtBQUtJQyxpQkFBYUQsZUFMakI7QUFNSUUsYUFBU0MsV0FOYjtBQU9JQyxjQUFVQyxZQVBkO0FBUUlDLGFBQVNDLGlCQVJiO0FBU0lDLFlBQVEsRUFUWjtBQVVJQyxtQkFBZUMsUUFWbkI7QUFXSUMsWUFBUUMsR0FBR0MsUUFBSCxDQUFZLE1BQVosRUFBb0IsS0FBcEIsQ0FYWjtBQVlJQyxZQUFRLElBWlo7QUFhSXZCLFlBQVEsRUFiWjs7QUFlQUEsVUFBTXdCLEtBQU4sR0FBYyxZQUFXO0FBQ3ZCLFVBQUlDLFFBQVFDLFVBQVUsQ0FBQ3pCLEtBQUssQ0FBTCxLQUFXLENBQVosSUFBaUJBLEtBQUssQ0FBTCxDQUEzQixDQUFaO0FBQ0kwQixlQUFTLElBRGI7QUFFSUMsVUFBSVgsTUFB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LElBQWdFLENBQTFFLENBQVI7QUFDQXdHLFdBQU90RCxLQUFQLEdBQWUsQ0FBQ2UsTUFBTSxDQUFQLElBQVlDLEtBQTNCO0FBQ0FzQyxXQUFPakIsTUFBUCxHQUFnQnBCLEtBQUtELEtBQXJCO0FBQ0QsR0FQRCxNQU9PO0FBQ0w7QUFDQXNDLGFBQVMsSUFBSUksTUFBSixDQUFXM0MsTUFBTSxDQUFqQixFQUFvQkUsRUFBcEIsQ0FBVDtBQUNEOztBQUVELE1BQUlKLElBQUl5QyxPQUFPRyxVQUFQLENBQWtCLElBQWxCLENBQVI7QUFDSWhELFlBQVU7QUFDUmtELGlCQUFhMUgsaUJBREw7QUFFUjJILGlCQUFhVCxpQkFGTCxFQURkOztBQUtBdEMsSUFBRWdELFNBQUYsR0FBY2hELEVBQUVpRCxXQUFGLEdBQWdCLEtBQTlCO0FBQ0FqRCxJQUFFa0QsU0FBRixHQUFjLFFBQWQ7O0FBRUEsTUFBSSxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQWxCLElBQThCQSxPQUFPQyxPQUF6QyxFQUFrREQsT0FBT0MsT0FBUCxHQUFpQmhKLEtBQWpCLENBQWxEO0FBQ0ssR0FBQ3FCLEdBQUc0SCxNQUFILEtBQWM1SCxHQUFHNEgsTUFBSCxHQUFZLEVBQTFCLENBQUQsRUFBZ0NqSixLQUFoQyxHQUF3Q0EsS0FBeEM7QUFDTixDQTlZRCIsImZpbGUiOiJkMy5jbG91ZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFdvcmQgY2xvdWQgbGF5b3V0IGJ5IEphc29uIERhdmllcywgaHR0cDovL3d3dy5qYXNvbmRhdmllcy5jb20vd29yZC1jbG91ZC9cbi8vIEFsZ29yaXRobSBkdWUgdG8gSm9uYXRoYW4gRmVpbmJlcmcsIGh0dHA6Ly9zdGF0aWMubXJmZWluYmVyZy5jb20vYnZfY2gwMy5wZGZcbihmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gY2xvdWQoKSB7XG4gICAgdmFyIHNpemUgPSBbMjU2LCAyNTZdLFxuICAgICAgICB0ZXh0ID0gY2xvdWRUZXh0LFxuICAgICAgICBmb250ID0gY2xvdWRGb250LFxuICAgICAgICBmb250U2l6ZSA9IGNsb3VkRm9udFNpemUsXG4gICAgICAgIGZvbnRTdHlsZSA9IGNsb3VkRm9udE5vcm1hbCxcbiAgICAgICAgZm9udFdlaWdodCA9IGNsb3VkRm9udE5vcm1hbCxcbiAgICAgICAgcm90YXRlID0gY2xvdWRSb3RhdGUsXG4gICAgICAgIHBhZGRpbmcgPSBjbG91ZFBhZGRpbmcsXG4gICAgICAgIHNwaXJhbCA9IGFyY2hpbWVkZWFuU3BpcmFsLFxuICAgICAgICB3b3JkcyA9IFtdLFxuICAgICAgICB0aW1lSW50ZXJ2YWwgPSBJbmZpbml0eSxcbiAgICAgICAgZXZlbnQgPSBkMy5kaXNwYXRjaChcIndvcmRcIiwgXCJlbmRcIiksXG4gICAgICAgIHRpbWVyID0gbnVsbCxcbiAgICAgICAgY2xvdWQgPSB7fTtcblxuICAgIGNsb3VkLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYm9hcmQgPSB6ZXJvQXJyYXkoKHNpemVbMF0gPj4gNSkgKiBzaXplWzFdKSxcbiAgICAgICAgICBib3VuZHMgPSBudWxsLFxuICAgICAgICAgIG4gPSB3b3Jkcy5sZW5ndGgsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIHRhZ3MgPSBbXSxcbiAgICAgICAgICBkYXRhID0gd29yZHMubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgIGQudGV4dCA9IHRleHQuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICAgIGQuZm9udCA9IGZvbnQuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICAgIGQuc3R5bGUgPSBmb250U3R5bGUuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICAgIGQud2VpZ2h0ID0gZm9udFdlaWdodC5jYWxsKHRoaXMsIGQsIGkpO1xuICAgICAgICAgICAgZC5yb3RhdGUgPSByb3RhdGUuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICAgIGQuc2l6ZSA9IH5+Zm9udFNpemUuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICAgIGQucGFkZGluZyA9IHBhZGRpbmcuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgIH0pLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYi5zaXplIC0gYS5zaXplOyB9KTtcblxuICAgICAgaWYgKHRpbWVyKSBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoc3RlcCwgMCk7XG4gICAgICBzdGVwKCk7XG5cbiAgICAgIHJldHVybiBjbG91ZDtcblxuICAgICAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gK25ldyBEYXRlLFxuICAgICAgICAgICAgZDtcbiAgICAgICAgd2hpbGUgKCtuZXcgRGF0ZSAtIHN0YXJ0IDwgdGltZUludGVydmFsICYmICsraSA8IG4gJiYgdGltZXIpIHtcbiAgICAgICAgICBkID0gZGF0YVtpXTtcbiAgICAgICAgICBkLnggPSAoc2l6ZVswXSAqIChNYXRoLnJhbmRvbSgpICsgLjUpKSA+PiAxO1xuICAgICAgICAgIGQueSA9IChzaXplWzFdICogKE1hdGgucmFuZG9tKCkgKyAuNSkpID4+IDE7XG4gICAgICAgICAgY2xvdWRTcHJpdGUoZCwgZGF0YSwgaSk7XG4gICAgICAgICAgaWYgKGQuaGFzVGV4dCAmJiBwbGFjZShib2FyZCwgZCwgYm91bmRzKSkge1xuICAgICAgICAgICAgdGFncy5wdXNoKGQpO1xuICAgICAgICAgICAgZXZlbnQud29yZChkKTtcbiAgICAgICAgICAgIGlmIChib3VuZHMpIGNsb3VkQm91bmRzKGJvdW5kcywgZCk7XG4gICAgICAgICAgICBlbHNlIGJvdW5kcyA9IFt7eDogZC54ICsgZC54MCwgeTogZC55ICsgZC55MH0sIHt4OiBkLnggKyBkLngxLCB5OiBkLnkgKyBkLnkxfV07XG4gICAgICAgICAgICAvLyBUZW1wb3JhcnkgaGFja1xuICAgICAgICAgICAgZC54IC09IHNpemVbMF0gPj4gMTtcbiAgICAgICAgICAgIGQueSAtPSBzaXplWzFdID4+IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID49IG4pIHtcbiAgICAgICAgICBjbG91ZC5zdG9wKCk7XG4gICAgICAgICAgZXZlbnQuZW5kKHRhZ3MsIGJvdW5kcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG91ZC5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbG91ZDtcbiAgICB9O1xuXG4gICAgY2xvdWQudGltZUludGVydmFsID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGltZUludGVydmFsO1xuICAgICAgdGltZUludGVydmFsID0geCA9PSBudWxsID8gSW5maW5pdHkgOiB4O1xuICAgICAgcmV0dXJuIGNsb3VkO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwbGFjZShib2FyZCwgdGFnLCBib3VuZHMpIHtcbiAgICAgIHZhciBwZXJpbWV0ZXIgPSBbe3g6IDAsIHk6IDB9LCB7eDogc2l6ZVswXSwgeTogc2l6ZVsxXX1dLFxuICAgICAgICAgIHN0YXJ0WCA9IHRhZy54LFxuICAgICAgICAgIHN0YXJ0WSA9IHRhZy55LFxuICAgICAgICAgIG1heERlbHRhID0gTWF0aC5zcXJ0KHNpemVbMF0gKiBzaXplWzBdICsgc2l6ZVsxXSAqIHNpemVbMV0pLFxuICAgICAgICAgIHMgPSBzcGlyYWwoc2l6ZSksXG4gICAgICAgICAgZHQgPSBNYXRoLnJhbmRvbSgpIDwgLjUgPyAxIDogLTEsXG4gICAgICAgICAgdCA9IC1kdCxcbiAgICAgICAgICBkeGR5LFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5O1xuXG4gICAgICB3aGlsZSAoZHhkeSA9IHModCArPSBkdCkpIHtcbiAgICAgICAgZHggPSB+fmR4ZHlbMF07XG4gICAgICAgIGR5ID0gfn5keGR5WzFdO1xuXG4gICAgICAgIGlmIChNYXRoLm1pbihkeCwgZHkpID4gbWF4RGVsdGEpIGJyZWFrO1xuXG4gICAgICAgIHRhZy54ID0gc3RhcnRYICsgZHg7XG4gICAgICAgIHRhZy55ID0gc3RhcnRZICsgZHk7XG5cbiAgICAgICAgaWYgKHRhZy54ICsgdGFnLngwIDwgMCB8fCB0YWcueSArIHRhZy55MCA8IDAgfHxcbiAgICAgICAgICAgIHRhZy54ICsgdGFnLngxID4gc2l6ZVswXSB8fCB0YWcueSArIHRhZy55MSA+IHNpemVbMV0pIGNvbnRpbnVlO1xuICAgICAgICAvLyBUT0RPIG9ubHkgY2hlY2sgZm9yIGNvbGxpc2lvbnMgd2l0aGluIGN1cnJlbnQgYm91bmRzLlxuICAgICAgICBpZiAoIWJvdW5kcyB8fCAhY2xvdWRDb2xsaWRlKHRhZywgYm9hcmQsIHNpemVbMF0pKSB7XG4gICAgICAgICAgaWYgKCFib3VuZHMgfHwgY29sbGlkZVJlY3RzKHRhZywgYm91bmRzKSkge1xuICAgICAgICAgICAgdmFyIHNwcml0ZSA9IHRhZy5zcHJpdGUsXG4gICAgICAgICAgICAgICAgdyA9IHRhZy53aWR0aCA+PiA1LFxuICAgICAgICAgICAgICAgIHN3ID0gc2l6ZVswXSA+PiA1LFxuICAgICAgICAgICAgICAgIGx4ID0gdGFnLnggLSAodyA8PCA0KSxcbiAgICAgICAgICAgICAgICBzeCA9IGx4ICYgMHg3ZixcbiAgICAgICAgICAgICAgICBtc3ggPSAzMiAtIHN4LFxuICAgICAgICAgICAgICAgIGggPSB0YWcueTEgLSB0YWcueTAsXG4gICAgICAgICAgICAgICAgeCA9ICh0YWcueSArIHRhZy55MCkgKiBzdyArIChseCA+PiA1KSxcbiAgICAgICAgICAgICAgICBsYXN0O1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoOyBqKyspIHtcbiAgICAgICAgICAgICAgbGFzdCA9IDA7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHc7IGkrKykge1xuICAgICAgICAgICAgICAgIGJvYXJkW3ggKyBpXSB8PSAobGFzdCA8PCBtc3gpIHwgKGkgPCB3ID8gKGxhc3QgPSBzcHJpdGVbaiAqIHcgKyBpXSkgPj4+IHN4IDogMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgeCArPSBzdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSB0YWcuc3ByaXRlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY2xvdWQud29yZHMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB3b3JkcztcbiAgICAgIHdvcmRzID0geDtcbiAgICAgIHJldHVybiBjbG91ZDtcbiAgICB9O1xuXG4gICAgY2xvdWQuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0gWyt4WzBdLCAreFsxXV07XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIGNsb3VkLmZvbnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmb250O1xuICAgICAgZm9udCA9IGQzLmZ1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIGNsb3VkLmZvbnRTdHlsZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGZvbnRTdHlsZTtcbiAgICAgIGZvbnRTdHlsZSA9IGQzLmZ1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIGNsb3VkLmZvbnRXZWlnaHQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmb250V2VpZ2h0O1xuICAgICAgZm9udFdlaWdodCA9IGQzLmZ1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIGNsb3VkLnJvdGF0ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJvdGF0ZTtcbiAgICAgIHJvdGF0ZSA9IGQzLmZ1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIGNsb3VkLnRleHQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0ZXh0O1xuICAgICAgdGV4dCA9IGQzLmZ1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIGNsb3VkLnNwaXJhbCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNwaXJhbDtcbiAgICAgIHNwaXJhbCA9IHNwaXJhbHNbeCArIFwiXCJdIHx8IHg7XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIGNsb3VkLmZvbnRTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZm9udFNpemU7XG4gICAgICBmb250U2l6ZSA9IGQzLmZ1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIGNsb3VkLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRkaW5nO1xuICAgICAgcGFkZGluZyA9IGQzLmZ1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gY2xvdWQ7XG4gICAgfTtcblxuICAgIHJldHVybiBkMy5yZWJpbmQoY2xvdWQsIGV2ZW50LCBcIm9uXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvdWRUZXh0KGQpIHtcbiAgICByZXR1cm4gZC50ZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvdWRGb250KCkge1xuICAgIHJldHVybiBcInNlcmlmXCI7XG4gIH1cblxuICBmdW5jdGlvbiBjbG91ZEZvbnROb3JtYWwoKSB7XG4gICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gIH1cblxuICBmdW5jdGlvbiBjbG91ZEZvbnRTaXplKGQpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGQudmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvdWRSb3RhdGUoKSB7XG4gICAgcmV0dXJuICh+fihNYXRoLnJhbmRvbSgpICogNikgLSAzKSAqIDMwO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvdWRQYWRkaW5nKCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgLy8gRmV0Y2hlcyBhIG1vbm9jaHJvbWUgc3ByaXRlIGJpdG1hcCBmb3IgdGhlIHNwZWNpZmllZCB0ZXh0LlxuICAvLyBMb2FkIGluIGJhdGNoZXMgZm9yIHNwZWVkLlxuICBmdW5jdGlvbiBjbG91ZFNwcml0ZShkLCBkYXRhLCBkaSkge1xuICAgIGlmIChkLnNwcml0ZSkgcmV0dXJuO1xuICAgIGMuY2xlYXJSZWN0KDAsIDAsIChjdyA8PCA1KSAvIHJhdGlvLCBjaCAvIHJhdGlvKTtcbiAgICB2YXIgeCA9IDAsXG4gICAgICAgIHkgPSAwLFxuICAgICAgICBtYXhoID0gMCxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoO1xuICAgIC0tZGk7XG4gICAgd2hpbGUgKCsrZGkgPCBuKSB7XG4gICAgICBkID0gZGF0YVtkaV07XG4gICAgICBjLnNhdmUoKTtcbiAgICAgIGMuZm9udCA9IGQuc3R5bGUgKyBcIiBcIiArIGQud2VpZ2h0ICsgXCIgXCIgKyB+figoZC5zaXplICsgMSkgLyByYXRpbykgKyBcInB4IFwiICsgZC5mb250O1xuICAgICAgdmFyIHcgPSBjLm1lYXN1cmVUZXh0KGQudGV4dCArIFwibVwiKS53aWR0aCAqIHJhdGlvLFxuICAgICAgICAgIGggPSBkLnNpemUgPDwgMTtcbiAgICAgIGlmIChkLnJvdGF0ZSkge1xuICAgICAgICB2YXIgc3IgPSBNYXRoLnNpbihkLnJvdGF0ZSAqIGNsb3VkUmFkaWFucyksXG4gICAgICAgICAgICBjciA9IE1hdGguY29zKGQucm90YXRlICogY2xvdWRSYWRpYW5zKSxcbiAgICAgICAgICAgIHdjciA9IHcgKiBjcixcbiAgICAgICAgICAgIHdzciA9IHcgKiBzcixcbiAgICAgICAgICAgIGhjciA9IGggKiBjcixcbiAgICAgICAgICAgIGhzciA9IGggKiBzcjtcbiAgICAgICAgdyA9IChNYXRoLm1heChNYXRoLmFicyh3Y3IgKyBoc3IpLCBNYXRoLmFicyh3Y3IgLSBoc3IpKSArIDB4MWYpID4+IDUgPDwgNTtcbiAgICAgICAgaCA9IH5+TWF0aC5tYXgoTWF0aC5hYnMod3NyICsgaGNyKSwgTWF0aC5hYnMod3NyIC0gaGNyKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3ID0gKHcgKyAweDFmKSA+PiA1IDw8IDU7XG4gICAgICB9XG4gICAgICBpZiAoaCA+IG1heGgpIG1heGggPSBoO1xuICAgICAgaWYgKHggKyB3ID49IChjdyA8PCA1KSkge1xuICAgICAgICB4ID0gMDtcbiAgICAgICAgeSArPSBtYXhoO1xuICAgICAgICBtYXhoID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICh5ICsgaCA+PSBjaCkgYnJlYWs7XG4gICAgICBjLnRyYW5zbGF0ZSgoeCArICh3ID4+IDEpKSAvIHJhdGlvLCAoeSArIChoID4+IDEpKSAvIHJhdGlvKTtcbiAgICAgIGlmIChkLnJvdGF0ZSkgYy5yb3RhdGUoZC5yb3RhdGUgKiBjbG91ZFJhZGlhbnMpO1xuICAgICAgYy5maWxsVGV4dChkLnRleHQsIDAsIDApO1xuICAgICAgaWYgKGQucGFkZGluZykgYy5saW5lV2lkdGggPSAyICogZC5wYWRkaW5nLCBjLnN0cm9rZVRleHQoZC50ZXh0LCAwLCAwKTtcbiAgICAgIGMucmVzdG9yZSgpO1xuICAgICAgZC53aWR0aCA9IHc7XG4gICAgICBkLmhlaWdodCA9IGg7XG4gICAgICBkLnhvZmYgPSB4O1xuICAgICAgZC55b2ZmID0geTtcbiAgICAgIGQueDEgPSB3ID4+IDE7XG4gICAgICBkLnkxID0gaCA+PiAxO1xuICAgICAgZC54MCA9IC1kLngxO1xuICAgICAgZC55MCA9IC1kLnkxO1xuICAgICAgZC5oYXNUZXh0ID0gdHJ1ZTtcbiAgICAgIHggKz0gdztcbiAgICB9XG4gICAgdmFyIHBpeGVscyA9IGMuZ2V0SW1hZ2VEYXRhKDAsIDAsIChjdyA8PCA1KSAvIHJhdGlvLCBjaCAvIHJhdGlvKS5kYXRhLFxuICAgICAgICBzcHJpdGUgPSBbXTtcbiAgICB3aGlsZSAoLS1kaSA+PSAwKSB7XG4gICAgICBkID0gZGF0YVtkaV07XG4gICAgICBpZiAoIWQuaGFzVGV4dCkgY29udGludWU7XG4gICAgICB2YXIgdyA9IGQud2lkdGgsXG4gICAgICAgICAgdzMyID0gdyA+PiA1LFxuICAgICAgICAgIGggPSBkLnkxIC0gZC55MDtcbiAgICAgIC8vIFplcm8gdGhlIGJ1ZmZlclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoICogdzMyOyBpKyspIHNwcml0ZVtpXSA9IDA7XG4gICAgICB4ID0gZC54b2ZmO1xuICAgICAgaWYgKHggPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgeSA9IGQueW9mZjtcbiAgICAgIHZhciBzZWVuID0gMCxcbiAgICAgICAgICBzZWVuUm93ID0gLTE7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGg7IGorKykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHc7IGkrKykge1xuICAgICAgICAgIHZhciBrID0gdzMyICogaiArIChpID4+IDUpLFxuICAgICAgICAgICAgICBtID0gcGl4ZWxzWygoeSArIGopICogKGN3IDw8IDUpICsgKHggKyBpKSkgPDwgMl0gPyAxIDw8ICgzMSAtIChpICUgMzIpKSA6IDA7XG4gICAgICAgICAgc3ByaXRlW2tdIHw9IG07XG4gICAgICAgICAgc2VlbiB8PSBtO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWVuKSBzZWVuUm93ID0gajtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZC55MCsrO1xuICAgICAgICAgIGgtLTtcbiAgICAgICAgICBqLS07XG4gICAgICAgICAgeSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkLnkxID0gZC55MCArIHNlZW5Sb3c7XG4gICAgICBkLnNwcml0ZSA9IHNwcml0ZS5zbGljZSgwLCAoZC55MSAtIGQueTApICogdzMyKTtcbiAgICB9XG4gIH1cblxuICAvLyBVc2UgbWFzay1iYXNlZCBjb2xsaXNpb24gZGV0ZWN0aW9uLlxuICBmdW5jdGlvbiBjbG91ZENvbGxpZGUodGFnLCBib2FyZCwgc3cpIHtcbiAgICBzdyA+Pj0gNTtcbiAgICB2YXIgc3ByaXRlID0gdGFnLnNwcml0ZSxcbiAgICAgICAgdyA9IHRhZy53aWR0aCA+PiA1LFxuICAgICAgICBseCA9IHRhZy54IC0gKHcgPDwgNCksXG4gICAgICAgIHN4ID0gbHggJiAweDdmLFxuICAgICAgICBtc3ggPSAzMiAtIHN4LFxuICAgICAgICBoID0gdGFnLnkxIC0gdGFnLnkwLFxuICAgICAgICB4ID0gKHRhZy55ICsgdGFnLnkwKSAqIHN3ICsgKGx4ID4+IDUpLFxuICAgICAgICBsYXN0O1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgaDsgaisrKSB7XG4gICAgICBsYXN0ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHc7IGkrKykge1xuICAgICAgICBpZiAoKChsYXN0IDw8IG1zeCkgfCAoaSA8IHcgPyAobGFzdCA9IHNwcml0ZVtqICogdyArIGldKSA+Pj4gc3ggOiAwKSlcbiAgICAgICAgICAgICYgYm9hcmRbeCArIGldKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHggKz0gc3c7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3VkQm91bmRzKGJvdW5kcywgZCkge1xuICAgIHZhciBiMCA9IGJvdW5kc1swXSxcbiAgICAgICAgYjEgPSBib3VuZHNbMV07XG4gICAgaWYgKGQueCArIGQueDAgPCBiMC54KSBiMC54ID0gZC54ICsgZC54MDtcbiAgICBpZiAoZC55ICsgZC55MCA8IGIwLnkpIGIwLnkgPSBkLnkgKyBkLnkwO1xuICAgIGlmIChkLnggKyBkLngxID4gYjEueCkgYjEueCA9IGQueCArIGQueDE7XG4gICAgaWYgKGQueSArIGQueTEgPiBiMS55KSBiMS55ID0gZC55ICsgZC55MTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbGxpZGVSZWN0cyhhLCBiKSB7XG4gICAgcmV0dXJuIGEueCArIGEueDEgPiBiWzBdLnggJiYgYS54ICsgYS54MCA8IGJbMV0ueCAmJiBhLnkgKyBhLnkxID4gYlswXS55ICYmIGEueSArIGEueTAgPCBiWzFdLnk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmNoaW1lZGVhblNwaXJhbChzaXplKSB7XG4gICAgdmFyIGUgPSBzaXplWzBdIC8gc2l6ZVsxXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIFtlICogKHQgKj0gLjEpICogTWF0aC5jb3ModCksIHQgKiBNYXRoLnNpbih0KV07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY3Rhbmd1bGFyU3BpcmFsKHNpemUpIHtcbiAgICB2YXIgZHkgPSA0LFxuICAgICAgICBkeCA9IGR5ICogc2l6ZVswXSAvIHNpemVbMV0sXG4gICAgICAgIHggPSAwLFxuICAgICAgICB5ID0gMDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIHNpZ24gPSB0IDwgMCA/IC0xIDogMTtcbiAgICAgIC8vIFNlZSB0cmlhbmd1bGFyIG51bWJlcnM6IFRfbiA9IG4gKiAobiArIDEpIC8gMi5cbiAgICAgIHN3aXRjaCAoKE1hdGguc3FydCgxICsgNCAqIHNpZ24gKiB0KSAtIHNpZ24pICYgMykge1xuICAgICAgICBjYXNlIDA6ICB4ICs9IGR4OyBicmVhaztcbiAgICAgICAgY2FzZSAxOiAgeSArPSBkeTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogIHggLT0gZHg7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB5IC09IGR5OyBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybiBbeCwgeV07XG4gICAgfTtcbiAgfVxuXG4gIC8vIFRPRE8gcmV1c2UgYXJyYXlzP1xuICBmdW5jdGlvbiB6ZXJvQXJyYXkobikge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIGkgPSAtMTtcbiAgICB3aGlsZSAoKytpIDwgbikgYVtpXSA9IDA7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgY2xvdWRSYWRpYW5zID0gTWF0aC5QSSAvIDE4MCxcbiAgICAgIGN3ID0gMSA8PCAxMSA+PiA1LFxuICAgICAgY2ggPSAxIDw8IDExLFxuICAgICAgY2FudmFzLFxuICAgICAgcmF0aW8gPSAxO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIGNhbnZhcy53aWR0aCA9IDE7XG4gICAgY2FudmFzLmhlaWdodCA9IDE7XG4gICAgcmF0aW8gPSBNYXRoLnNxcnQoY2FudmFzLmdldENvbnRleHQoXCIyZFwiKS5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSkuZGF0YS5sZW5ndGggPj4gMik7XG4gICAgY2FudmFzLndpZHRoID0gKGN3IDw8IDUpIC8gcmF0aW87XG4gICAgY2FudmFzLmhlaWdodCA9IGNoIC8gcmF0aW87XG4gIH0gZWxzZSB7XG4gICAgLy8gQXR0ZW1wdCB0byB1c2Ugbm9kZS1jYW52YXMuXG4gICAgY2FudmFzID0gbmV3IENhbnZhcyhjdyA8PCA1LCBjaCk7XG4gIH1cblxuICB2YXIgYyA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksXG4gICAgICBzcGlyYWxzID0ge1xuICAgICAgICBhcmNoaW1lZGVhbjogYXJjaGltZWRlYW5TcGlyYWwsXG4gICAgICAgIHJlY3Rhbmd1bGFyOiByZWN0YW5ndWxhclNwaXJhbFxuICAgICAgfTtcbiAgYy5maWxsU3R5bGUgPSBjLnN0cm9rZVN0eWxlID0gXCJyZWRcIjtcbiAgYy50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xuXG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGNsb3VkO1xuICBlbHNlIChkMy5sYXlvdXQgfHwgKGQzLmxheW91dCA9IHt9KSkuY2xvdWQgPSBjbG91ZDtcbn0pKCk7Il19
